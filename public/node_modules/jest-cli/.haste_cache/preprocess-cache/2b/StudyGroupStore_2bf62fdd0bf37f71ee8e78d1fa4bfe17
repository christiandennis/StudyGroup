'use strict'; // istanbul ignore next
var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})(); // istanbul ignore next
function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}var alt = require('../alt');var StudyGroupActions = require('../actions/StudyGroupActions');var StudyGroupSource = require('../sources/StudyGroupSource');
var UserActions = require('../actions/UserActions');var 

StudyGroupStore = (function () {
	function StudyGroupStore() {_classCallCheck(this, StudyGroupStore);
		this.user = null;
		this.errorMessageUser = null;
		this.sessionID = null;
		this.studyGroups = [];
		this.errorMessage = null;
		this.bindListeners({ 
			handleUpdateStudyGroups: StudyGroupActions.UPDATE_STUDY_GROUPS, 
			handleFetchStudyGroups: StudyGroupActions.FETCH_STUDY_GROUPS, 
			handleStudyGroupFailed: StudyGroupActions.STUDY_GROUPS_FAILED, 
			handleUpdateUser: UserActions.UPDATE_USER, 
			handleFetchUser: UserActions.FETCH_USER, 
			handleStudyUser: UserActions.USER_FAILED });



		this.exportPublicMethods({ 
			getStudyGroup: this.getStudyGroup });

		this.exportAsync(StudyGroupSource);}_createClass(StudyGroupStore, [{ key: 'handleUpdateStudyGroups', value: 


		function handleUpdateStudyGroups(studyGroups) {
			this.studyGroups = studyGroups;
			this.errorMessage = null;} }, { key: 'handleFetchStudyGroups', value: 

		function handleFetchStudyGroups() {
			this.studyGroups = [];} }, { key: 'handleStudyGroupFailed', value: 

		function handleStudyGroupFailed(errorMessage) {
			this.errorMessage = errorMessage;} }, { key: 'handleUpdateUser', value: 


		function handleUpdateUser(user) {
			this.user = user[0].name;
			this.sessionID = user[0].sessionID;
			this.errorMessage = null;
			console.log("BIJIK");} }, { key: 'handleFetchUser', value: 


		function handleFetchUser() {
			this.user = null;} }, { key: 'handleStudyUser', value: 


		function handleStudyUser(errorMessage) {
			this.errorMessage = errorMessage;} }, { key: 'getStudyGroup', value: 



		function getStudyGroup(id) {var _getState = 
			this.getState();var studyGroup = _getState.studyGroup;
			for (var i = 0; i < studyGroups.length; i += 1) {
				if (studyGroups[i].id === id) {
					return studyGroups[i];}}


			return null;} }]);return StudyGroupStore;})();




module.exports = alt.createStore(StudyGroupStore, 'StudyGroupStore');