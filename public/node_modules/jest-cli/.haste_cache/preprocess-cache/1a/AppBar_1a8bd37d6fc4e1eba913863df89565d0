'use strict';var React = require('react');
var render = require('react-dom').render;
var Link = require('react-router').Link;

var StudyGroupStore = require('../stores/StudyGroupStore');
var AltContainer = require('alt/AltContainer');

var LandingPage = require('./LandingPage.jsx');
var ReactTestUtils = require('react-addons-test-utils');

var AppBar = require('material-ui/lib/app-bar');
var Dialog = require('material-ui/lib/dialog');
var FlatButton = require('material-ui/lib/flat-button');
var TextField = require('material-ui/lib/text-field');
var SideBar = require('material-ui/lib/left-nav');
var MenuItem = require('material-ui/lib/menu/menu-item');
var ThemeManager = require('material-ui/lib/styles/theme-manager');
var MyRawTheme = require('material-ui/lib/styles/raw-themes/light-raw-theme.js');
var MyRawTheme2 = require('material-ui/lib/styles/raw-themes/sidebar-theme.js');
var Avatar = require('material-ui/lib/avatar');
var Checkbox = require('material-ui/lib/checkbox');
var Snackbar = require('material-ui/lib/snackbar');
var DatePicker = require('material-ui/lib/date-picker/date-picker');
var TimePicker = require('material-ui/lib/time-picker/time-picker');

var Sticky = require('react-sticky');

var URL = "http://localhost:3000";
var axios = require('axios');

var LeftBar = React.createClass({ displayName: 'LeftBar', 

	childContextTypes: { 
		muiTheme: React.PropTypes.object }, 


	getChildContext: function getChildContext() {
		return { 
			muiTheme: ThemeManager.getMuiTheme(MyRawTheme2) };}, 



	myProfile: function myProfile() {
		console.log("view my profile here");}, 


	myGroups: function myGroups() {
		console.log("trigger my-group-view here");}, 


	editProfile: function editProfile() {
		console.log("edit profile here");}, 


	logout: function logout() {
		console.log("user logout here");}, 


	render: function render() {
		return (
			React.createElement(SideBar, { ref: 'leftNav', docked: false }, 
			React.createElement(MenuItem, { index: 0, style: { textAlign: "center" } }, 'Hi, ', this.props.user, '!'), 
			React.createElement(MenuItem, { index: 1, style: { textAlign: "center", marginBottom: "20px" } }, React.createElement('span', { onClick: this.myProfile }, React.createElement(Avatar, { size: '120' }, ' ', this.props.user.slice(0, 1), ' '))), 
			React.createElement('span', { onClick: this.myGroups }, '  ', React.createElement(MenuItem, { index: 2 }, 'My Groups'), ' '), 
			React.createElement('span', { onClick: this.editProfile }, ' ', React.createElement(MenuItem, { index: 3 }, 'Edit Profile'), ' '), 
			React.createElement('span', { onClick: this.logout }, '  ', React.createElement(MenuItem, { index: 4 }, 'Log Out'), '  ')));} });





// TEST

var node = SideBar.findRenderedDOMComponentWithTag('span').getDOMNode();
ReactTestUtils.Simulate.click(node);

var TopBar = React.createClass({ displayName: 'TopBar', 
	dialogLogin: function dialogLogin() {
		this.refs.loginDialog.show();}, 


	cancelLogIn: function cancelLogIn() {
		this.refs.loginDialog.dismiss();}, 


	submitLogIn: function submitLogIn() {
		this.refs.loginDialog.dismiss();
		this.login();}, 


	dialogSignUp: function dialogSignUp() {
		this.refs.signUpDialog.show();}, 


	cancelSignUp: function cancelSignUp() {
		this.refs.signUpDialog.dismiss();}, 


	submitSignUp: function submitSignUp() {
		this.refs.signUpDialog.dismiss();
		this.signUp();}, 


	dialogNewGroup: function dialogNewGroup() {
		this.refs.newGroupDialog.show();}, 


	cancelNewGroup: function cancelNewGroup() {
		this.refs.newGroupDialog.dismiss();}, 


	submitNewGroup: function submitNewGroup() {
		var title = this.refs.createGroupTitle.getValue();
		var subject = this.refs.createGroupSubject.getValue();
		var description = this.refs.createGroupDescription.getValue();
		var date = this.refs.createGroupDate.getDate();
		var location = this.refs.createGroupLocation.getValue();
		var capacity = this.refs.createGroupCapacity.getValue();
		var host = this.props.user;

		if (true) {
			console.log(title);
			console.log(subject);
			console.log(description);
			console.log(date);
			console.log(location);
			console.log(capacity);
			console.log(host);}


		var newGroupDialog = this.refs.newGroupDialog;
		var failedSnackbar = this.refs.createGroupFailedSnackbar;
		var successSnackbar = this.refs.createGroupSuccessSnackbar;

		axios.post(URL + "/groups", { 
			"title": title, 
			"subject": subject, 
			"description": description, 
			"date": date, 
			"location": location, 
			"capacity": capacity, 
			"host": host }).
		then(function (response) {
			console.log("post new group SUCCEED");
			console.log(response);
			StudyGroupStore.fetchStudyGroups();
			successSnackbar.show();
			newGroupDialog.dismiss();})['catch'](
		function (response) {
			failedSnackbar.show();
			console.log("post new group FAILED");
			console.log(response);});}, 



	signUp: function signUp() {
		var fullname = this.refs.fullNameSignUp.getValue();
		var email = this.refs.emailSignUp.getValue();
		var password = this.refs.passwordSignUp.getValue();
		var confirmPassword = this.refs.confirmPasswordSignUp.getValue();
		console.log(fullname);
		console.log(email);
		console.log(password);
		console.log(confirmPassword);
		console.log("SIGNUP DONE");
		axios.post("https://sheetsu.com/apis/72092a94", { 
			"sessionID": password, 
			"id": email, 
			"name": fullname });}, 



	login: function login() {
		console.log("user before");
		var user = this.refs.email.getValue();
		var password = this.refs.password.getValue();
		console.log(user);
		console.log(password);
		StudyGroupStore.fetchUser(user, password);}, 


	openLeft: function openLeft() {
		console.log("SIDEBAR OPEN");
		this.refs.leftBar.refs.leftNav.toggle();}, 


	getStyle: function getStyle() {
		console.log("style executed");
		return {};}, 




	// THEME
	childContextTypes: { 
		muiTheme: React.PropTypes.object }, 


	getChildContext: function getChildContext() {
		return { 
			muiTheme: ThemeManager.getMuiTheme(MyRawTheme) };}, 



	// END THEME

	render: function render() {
		console.log("render appbar");
		if (this.props.user) {
			return (

				React.createElement('div', null, 
				React.createElement('div', { style: { zIndex: "1000", 
						paddingBottom: "64px" } }, 
				React.createElement(Sticky, null, 
				React.createElement(AppBar, { 
					title: 'StudyGroup', 
					style: { 
						backgroundColor: '#0D47A1 !important' }, 

					onLeftIconButtonTouchTap: this.openLeft, 
					iconElementRight: React.createElement(FlatButton, { label: 'New StudyGroup', onClick: this.dialogNewGroup }) }))), 



				React.createElement(LeftBar, { ref: 'leftBar', user: this.props.user }), 

				React.createElement(Dialog, { ref: 'newGroupDialog', 
					title: 'Create a New StudyGroup', 
					modal: true, 
					actions: [
					React.createElement(FlatButton, { 
						label: 'Cancel', 
						secondary: true, 
						onTouchTap: this.cancelNewGroup }), 
					React.createElement(Link, { to: '/studygroupapp' }, React.createElement(FlatButton, { 
						label: 'Submit', 
						primary: true, 
						onTouchTap: this.submitNewGroup }))], 
					autoDetectWindowHeight: true, 
					autoScrollBodyContent: true }, 
				React.createElement('div', null, 
				React.createElement(TextField, { 
					ref: 'createGroupSubject', 
					hintText: 'CS169', 
					floatingLabelText: 'Class' }), 
				React.createElement(TextField, { 
					ref: 'createGroupTitle', 
					hintText: 'Learn React together', 
					floatingLabelText: 'Title' }), 
				React.createElement(TextField, { 
					ref: 'createGroupDescription', 
					hintText: 'Come and learn the basic (and some advanced) React together! REACT IS THE FUTURE!!!', 
					floatingLabelText: 'Description', 
					fullWidth: true, 
					multiLine: true }), 
				React.createElement(DatePicker, { 
					ref: 'createGroupDate', 
					hintText: 'Nov 22, 2015', 
					floatingLabelText: 'Date' }), 
				React.createElement(TimePicker, { 
					ref: 'createGroupTime', 
					hintText: '9:00 pm', 
					floatingLabelText: 'Time' }), 
				React.createElement(TextField, { 
					ref: 'createGroupLocation', 
					hintText: 'Wozniak Longue, Soda Hall', 
					floatingLabelText: 'Location' }), 
				React.createElement(TextField, { 
					ref: 'createGroupCapacity', 
					hintText: '20', 
					floatingLabelText: 'Capacity' }), 
				React.createElement(Checkbox, { 
					ref: 'createGroupPrivacy', 
					name: 'privacy', 
					value: 'private', 
					label: 'private' }))), 



				React.createElement(Snackbar, { 
					ref: 'createGroupFailedSnackbar', 
					message: 'Failed to create group', 
					autoHideDuration: '5000' }), 

				React.createElement(Snackbar, { 
					ref: 'createGroupSuccessSnackbar', 
					message: 'Group Created', 
					autoHideDuration: '5000' })));}





		return (
			React.createElement('div', null, 

			React.createElement(Sticky, { stickyStyle: { zIndex: "1000", 
					paddingBottom: "64px" } }, 
			React.createElement(AppBar, { 
				className: 'logo-title', 
				title: 'StudyGroup', 
				style: { 
					backgroundColor: '#0D47A1 !important', 
					position: 'fixed', 
					marginBottom: '64px' }, 

				zDepth: '100', 
				showMenuIconButton: false, 
				iconElementRight: React.createElement(FlatButton, { label: 'Log In', onClick: this.dialogLogin }) })), 


			React.createElement(LandingPage, { dialogSignUp: this.dialogSignUp }), 

			React.createElement(Dialog, { ref: 'loginDialog', 
				title: 'Log In', 
				actions: [
				React.createElement(FlatButton, { 
					label: 'Cancel', 
					secondary: true, 
					onTouchTap: this.cancelLogIn }), 
				React.createElement(Link, { to: '/studygroupapp' }, React.createElement(FlatButton, { 
					label: 'Log In', 
					primary: true, 
					onTouchTap: this.submitLogIn }))], 
				autoDetectWindowHeight: true, 
				autoScrollBodyContent: true }, 
			React.createElement('div', null, 
			React.createElement(TextField, { 
				ref: 'email', 
				hintText: 'christiandennis@studygroup.com', 
				floatingLabelText: 'Email' }), React.createElement('br', null), 
			React.createElement(TextField, { 
				ref: 'password', 
				hintText: 'Password', 
				floatingLabelText: 'Password', 
				type: 'password' }), React.createElement('br', null))), 



			React.createElement(Dialog, { ref: 'signUpDialog', 
				title: 'Sign Up', 
				actions: [
				React.createElement(FlatButton, { 
					label: 'Cancel', 
					secondary: true, 
					onTouchTap: this.cancelSignUp }), 
				React.createElement(FlatButton, { 
					label: 'Sign Up', 
					primary: true, 
					onTouchTap: this.submitSignUp })], 
				autoDetectWindowHeight: true, 
				autoScrollBodyContent: true }, 
			React.createElement('div', null, 
			React.createElement(TextField, { 
				ref: 'fullNameSignUp', 
				hintText: 'Christian Dennis', 
				floatingLabelText: 'Full Name' }), React.createElement('br', null), 
			React.createElement(TextField, { 
				ref: 'emailSignUp', 
				hintText: 'christiandennis@studygroup.com', 
				floatingLabelText: 'Email' }), React.createElement('br', null), 
			React.createElement(TextField, { 
				ref: 'passwordSignUp', 
				hintText: 'Password', 
				floatingLabelText: 'Password', 
				type: 'password' }), React.createElement('br', null), 
			React.createElement(TextField, { 
				ref: 'confirmPasswordSignUp', 
				hintText: 'must be hard!', 
				floatingLabelText: 'Confirm Password', 
				type: 'password' })))));} });










module.exports = TopBar;