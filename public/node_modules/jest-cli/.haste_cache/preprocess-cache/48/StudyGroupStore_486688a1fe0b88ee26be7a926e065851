var alt = require('../alt');
var StudyGroupActions = require('../actions/StudyGroupActions');
var MyGroupsActions = require('../actions/MyGroupsActions');
var StudyGroupSource = require('../sources/StudyGroupSource');
var UserActions = require('../actions/UserActions');
var CommentsActions = require('../actions/CommentsActions');

const moment = require('moment');


	function StudyGroupStore() {"use strict";
		this.user = null;
		this.errorMessageUser = null;
		this.studyGroups = null;
		this.upcomingGroups = null;
		this.pastGroups = null;


		this.bindListeners({
			handleUpdateStudyGroups: StudyGroupActions.UPDATE_STUDY_GROUPS,
			handleFetchStudyGroups: StudyGroupActions.FETCH_STUDY_GROUPS,
			handleStudyGroupFailed: StudyGroupActions.STUDY_GROUPS_FAILED,

			handleUpdateUser: UserActions.UPDATE_USER,
			handleFetchUser: UserActions.FETCH_USER,
			handleStudyUser: UserActions.USER_FAILED,

			handleSignUp: UserActions.SIGN_UP,
			handleSignOut: UserActions.SIGN_OUT,

			handlePostNewGroup: StudyGroupActions.POST_NEW_GROUP,
			handleRefreshGroups: StudyGroupActions.REFRESH_GROUPS,
			handleEditGroup: StudyGroupActions.EDIT_GROUP,

			handleFetchMyGroups: MyGroupsActions.FETCH_MY_GROUPS,
			handleJoinOrLeaveGroup: MyGroupsActions.JOIN_OR_LEAVE_GROUP,
			handleDismissGroup: MyGroupsActions.DISMISS_GROUP,

			handleFetchComments: CommentsActions.FETCH_COMMENTS,
			handlePostComment: CommentsActions.POST_COMMENT
		});


		this.exportPublicMethods({
			getStudyGroup: this.getStudyGroup
		});
		this.exportAsync(StudyGroupSource);
	}
	
	Object.defineProperty(StudyGroupStore.prototype,"compare",{writable:true,configurable:true,value:function(a,b) {"use strict";
		if (new Date(a.date) < new Date(b.date))
		    return -1;
		if (new Date(a.date) > new Date(b.date))
		    return 1;
		return 0;
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleFetchComments",{writable:true,configurable:true,value:function(data) {"use strict";
		for (var i in this.studyGroups) {
	     	if (this.studyGroups[i].id === data.groupID) {
	       		this.studyGroups[i].commentsData = data.comments;
	        	break;
	     	}
	   	}
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleDismissGroup",{writable:true,configurable:true,value:function(studyGroupID) {"use strict";
		for (var i in this.upcomingGroups) {
	     	if (this.upcomingGroups[i].id === studyGroupID) {
	       		this.upcomingGroups.splice(i, 1);
	       		break;
	     	}
	   	}
   		for (var i in this.studyGroups) {
   	     	if (this.studyGroups[i].id === studyGroupID) {
   	       		this.studyGroups.splice(i, 1);
   	       		break;
   	     	}
   	   	}
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handlePostComment",{writable:true,configurable:true,value:function(comment) {"use strict";
		for (var i in this.studyGroups) {
	     	if (this.studyGroups[i].id === comment.groupid) {
	       		this.studyGroups[i].comments.push(comment);
	     	}
	   	}

	   	for (var i in this.upcomingGroups) {
	     	if (this.upcomingGroups[i].id === comment.groupid) {
	       		this.upcomingGroups[i].comments.push(comment);
	        	break;
	     	}
	   	}

	   	for (var i in this.pastGroups) {
	     	if (this.pastGroups[i].id === comment.groupid) {
	       		this.pastGroups[i].comments.push(comment);
	        	break;
	     	}
	   	}
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleFetchMyGroups",{writable:true,configurable:true,value:function(myGroups) {"use strict";
		this.pastGroups = [];
		this.upcomingGroups = [];

		var curr_epoch = moment(new Date().toString()).unix();

		for (var i in myGroups) {
	     	if (myGroups[i].date < curr_epoch) {
	       		this.pastGroups.push(myGroups[i]);
	     	} else {
	     		this.upcomingGroups.push(myGroups[i]);
	     	}
	   	}
	   	this.upcomingGroups.sort(this.compare);
	   	this.pastGroups.sort(this.compare);
	   	this.pastGroups.reverse();
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleJoinOrLeaveGroup",{writable:true,configurable:true,value:function(myGroup) {"use strict";
		// add the joined group to mygroups
		if(myGroup.joinOrLeave === 'add'){
			var found = false;
			for (var i in this.upcomingGroups) {
		     	if (this.upcomingGroups[i].id === myGroup.groupID) {
		       		found = true
		        	break;
		     	}
		   	}
		   	if (!found){
		   		this.upcomingGroups.push(myGroup.group);
		   	}
		} else { // remove the left group from mygroups
			for (var i in this.upcomingGroups) {
		     	if (this.upcomingGroups[i].id === myGroup.groupID) {
		       		this.upcomingGroups.splice(i, 1);
		       		break;
		     	}
		   	}
		}

		// update the counter/capacity on the card
		for (var i in this.studyGroups) {
	     	if (this.studyGroups[i].id == myGroup.groupID) {
	       		this.studyGroups[i] = myGroup.group;
	        	break;
	     	}
	   	}

	   	this.upcomingGroups.sort(this.compare);
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleEditGroup",{writable:true,configurable:true,value:function(studyGroup) {"use strict";
		for (var i in this.studyGroups) {
	     	if (this.studyGroups[i].id == studyGroup.id) {
	       		this.studyGroups[i] = studyGroup;
	        	break;
	     	}
	   	}
	   	console.log('start');
		this.studyGroups.sort(this.compare);
		console.log('done');
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handlePostNewGroup",{writable:true,configurable:true,value:function(studyGroup) {"use strict";
		this.studyGroups.unshift(studyGroup);
		this.studyGroups.sort(this.compare);

		this.upcomingGroups.unshift(studyGroup);
		this.upcomingGroups.sort(this.compare);

		this.errorMessage = null;
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleSignUp",{writable:true,configurable:true,value:function() {"use strict";
		
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleSignOut",{writable:true,configurable:true,value:function() {"use strict";
		this.user = null;
		this.studyGroups = null;
		this.errorMessage = null;
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleUpdateStudyGroups",{writable:true,configurable:true,value:function(studyGroups){"use strict";
		this.studyGroups = studyGroups;
		this.studyGroups.sort(this.compare);
		var curr_epoch = moment(new Date().toString()).unix();
		var index;
		for (var i in this.studyGroups) {
	     	if (this.studyGroups[i].date >= curr_epoch) {
	       		index = i;
	        	break;
	     	}
	   	}
	   	this.studyGroups.splice(0, index);
		this.errorMessage = null;
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleFetchStudyGroups",{writable:true,configurable:true,value:function() {"use strict";
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleStudyGroupFailed",{writable:true,configurable:true,value:function(errorMessage) {"use strict";
		this.errorMessage = errorMessage;
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleRefreshGroups",{writable:true,configurable:true,value:function(studyGroup){"use strict";
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleUpdateUser",{writable:true,configurable:true,value:function(user){"use strict";
		this.user = user;
		this.errorMessageUser = null;
	}});

	Object.defineProperty(StudyGroupStore.prototype,"handleFetchUser",{writable:true,configurable:true,value:function() {"use strict";
		this.user = null;
	}});
	
	Object.defineProperty(StudyGroupStore.prototype,"handleStudyUser",{writable:true,configurable:true,value:function(errorMessage) {"use strict";
		this.errorMessage = errorMessage;
	}});


	Object.defineProperty(StudyGroupStore.prototype,"getStudyGroup",{writable:true,configurable:true,value:function(id) {"use strict";
		var $__0=  this.getState(),studyGroup=$__0.studyGroup;
		for (var i =0; i< studyGroups.length; i+=1) {
			if (studyGroups[i].id===id) {
				return studyGroups[i];
			}
		}
		return null;
	}});



module.exports = alt.createStore(StudyGroupStore, 'StudyGroupStore');