// React, react-reouter, alt
var React = require('react');
var render = require('react-dom').render;
var Router = require('react-router');
var StudyGroupStore = require('../stores/StudyGroupStore');

// import components
var Dialog_GroupDetail = require('./Dialog_GroupDetail.jsx');

// Matertial UI components
const TextField = require('material-ui/lib/text-field');
const Dialog = require('material-ui/lib/dialog');
const RaisedButton = require('material-ui/lib/raised-button');
const Paper = require('material-ui/lib/paper');
const Avatar = require('material-ui/lib/avatar');
const FontIcon = require('material-ui/lib/font-icon');

const moment = require('moment');

var MainGroupViewCard = React.createClass({displayName: "MainGroupViewCard",
	openGroupDetailDialog:function() {
		this.refs.groupDetailDialog.refs.groupDetailDialog.show();
	},

	calculateTimeColor:function(card_date) {
		var card_epoch = moment(card_date).unix();
		var curr_time = new Date().toString();
		var curr_epoch = moment(curr_time).unix();
		var time_diff = card_epoch - curr_epoch;

		if (time_diff >= 259200) {
			return 'colorBarGreen';
		} else if (time_diff >= 86400) {
			return 'colorBarYellow';
		} else if (time_diff >= 0) {
			return 'colorBarRed';
		} else {
			return 'colorBarBlack';
		}
	},

	joinLeaveGroup:function(joinOrLeave) {
		// some logic to determine whether to join or to leave
		if (joinOrLeave.joinText === 'Dismiss') {
			this.refs.dismissConfirmation.show();
		} else if (joinOrLeave.joinText === 'Leave') {
			StudyGroupStore.joinOrLeaveGroup(this.props.studyGroup.id, 'remove');
		} else if (joinOrLeave.joinText === 'Join'){
			StudyGroupStore.joinOrLeaveGroup(this.props.studyGroup.id, 'add');
		}
	},

	checkUserGoing:function(studyGroup, user) {
		for (var i in studyGroup.users) {
	     	if (studyGroup.users[i].id === user.id) {
	       		return true;
	     	}
	   	}
	   	return false;
	},

	getJoinText:function(studyGroup, user) {
		if (studyGroup.host === user.nickname) {
			return 'Dismiss';
		} else if(this.checkUserGoing(studyGroup, user)) {
			return 'Leave';
		} else if (studyGroup.guestlist === studyGroup.capacity) {
			return 'Full';
		} else {
			return 'Join';
		}
	},

	confirmDismiss:function() {
		StudyGroupStore.dismissGroup(this.props.studyGroup.id);
	},

	checkDisabled:function(studyGroup) {
		var curr_epoch = moment(new Date().toString()).unix();
		return (studyGroup.date < curr_epoch);
	},

	getTimeString:function(time) {
		// var d = new Date(0);
		// d.setUTCSeconds(Number(time));
		return moment(time).format("h:mm a").toString();
	},

	getDateString:function(date) {
		// var d = new Date(0);
		// d.setUTCSeconds(Number(date));
		return moment(date).format("ddd, MMM D").toString();
	},

	render:function() {
		var studyGroup = this.props.studyGroup;
		var user = this.props.user;

		var date = this.getDateString(studyGroup.date);
		var time = this.getTimeString(studyGroup.date);
		var color = this.calculateTimeColor(studyGroup.date);	
		var joinText = this.getJoinText(studyGroup, user);
		var disabled = this.checkDisabled(studyGroup);

		return (
			React.createElement("div", {key: studyGroup.id}, 
				React.createElement(Dialog_GroupDetail, {ref: "groupDetailDialog", studyGroup: studyGroup, user: user, disabled: disabled}), 
				React.createElement(Dialog, {
					ref: "dismissConfirmation", 
				  	title: "Are you sure you want to delete this group?", 
				  	actions: [
							  	{ text: 'Cancel' },
							  	{ text: 'Yes', onTouchTap: this.confirmDismiss }
							], 
				  	actionFocus: "submit", 
				  	onRequestClose: this._handleRequestClose}, 
				  	"This action cannot be undone."
				), 

		        React.createElement(Paper, {zDepth: 3, className: "card-container"}, 
			        React.createElement("div", {className: "card studyGroup"}, 
			            React.createElement("div", {className: color}), 
			            React.createElement("div", {className: "cardContent"}, 
					        React.createElement("div", {className: "row1"}, 
					        	React.createElement("div", {className: "column11 noBlur"}, 
					        		React.createElement(Avatar, {size: 70, className: "centerVertical"}, " ", studyGroup.host.slice(0,1).toUpperCase(), " ")
					        	), 
					        	React.createElement("div", {className: "column12"}, 
					        		React.createElement("div", {className: "column121"}, 
					        			React.createElement("div", {className: "subject"}, studyGroup.subject)
					        		), 
					        		React.createElement("div", {className: "column122"}, 
					        			React.createElement("div", {className: "title"}, studyGroup.title)
					        		)
					        	), 
					        	React.createElement("div", {className: "column13"}, 
					        		React.createElement("div", {className: "date"}, date), 
                    				React.createElement("div", {className: "time"}, time)
					        	)
					        ), 
					        React.createElement("div", {className: "row2"}, 
					        	React.createElement("div", {className: "column11 noBlur"}, 
					        		React.createElement(FontIcon, {className: "material-icons centerVertical", style: {fontSize:'48px', color:'grey'}}, "info_outline")
					        	), 
					        	React.createElement("div", {className: "column22 noBlur"}, 
					        		React.createElement("div", {className: "description centerVertical"}, 
						        		studyGroup.description, 
						        		React.createElement("div", {className: "seeMore", onClick: this.openGroupDetailDialog}, "See More...")
					        		)
					        	)
					        ), 
					        React.createElement("div", {className: "row3"}, 
					        	React.createElement("div", {className: "column11 noBlur"}, 
					        		React.createElement(FontIcon, {className: "material-icons centerVertical", style: {fontSize:'48px', color:'grey'}}, "map")
					        	), 
					        	React.createElement("div", {className: "column32 noBlur"}, 
					        		React.createElement("div", {className: "location centerVertical"}, studyGroup.location)
					        	)
					        ), 
					        React.createElement("div", {className: "row4"}, 
					        	React.createElement("div", {className: "column11"}

					        	), 
					        	React.createElement("div", {className: "column42 noBlur"}, 
					        		React.createElement("div", {className: "host centerVertical"}, "@", studyGroup.host)
					        	), 
					        	React.createElement("div", {className: "column43 noBlur"}, 
					        		React.createElement("div", {className: "centerVertical alignRight"}, 
					        			React.createElement(RaisedButton, {onClick: this.joinLeaveGroup.bind(this, {joinText:joinText}), label: joinText, disabled: disabled})
					        		)
					        	), 
					        	React.createElement("div", {className: "column44 noBlur"}, 
					        		React.createElement("div", {className: "capacity centerVertical"}, studyGroup.guestlist, "/", studyGroup.capacity)
					        	)
					        )
					    )
			        )
		        )
	    	)
		)
	}
})

module.exports = MainGroupViewCard;